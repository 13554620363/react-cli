{"ast":null,"code":"(function (self) {\n  'use strict'; // if __disableNativeFetch is set to true, the it will always polyfill fetch\n  // with Ajax.\n\n  if (!self.__disableNativeFetch && self.fetch) {\n    return;\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name');\n    }\n\n    return name.toLowerCase();\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n\n    return value;\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function (value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function (name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function (name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var list = this.map[name];\n\n    if (!list) {\n      list = [];\n      this.map[name] = list;\n    }\n\n    list.push(value);\n  };\n\n  Headers.prototype['delete'] = function (name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function (name) {\n    var values = this.map[normalizeName(name)];\n    return values ? values[0] : null;\n  };\n\n  Headers.prototype.getAll = function (name) {\n    return this.map[normalizeName(name)] || [];\n  };\n\n  Headers.prototype.has = function (name) {\n    return this.map.hasOwnProperty(normalizeName(name));\n  };\n\n  Headers.prototype.set = function (name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)];\n  };\n\n  Headers.prototype.forEach = function (callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function (name) {\n      this.map[name].forEach(function (value) {\n        callback.call(thisArg, value, name, this);\n      }, this);\n    }, this);\n  };\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'));\n    }\n\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function (resolve, reject) {\n      reader.onload = function () {\n        resolve(reader.result);\n      };\n\n      reader.onerror = function () {\n        reject(reader.error);\n      };\n    });\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    reader.readAsArrayBuffer(blob);\n    return fileReaderReady(reader);\n  }\n\n  function readBlobAsText(blob, options) {\n    var reader = new FileReader();\n    var contentType = options.headers.map['content-type'] ? options.headers.map['content-type'].toString() : '';\n    var regex = /charset\\=[0-9a-zA-Z\\-\\_]*;?/;\n\n    var _charset = blob.type.match(regex) || contentType.match(regex);\n\n    var args = [blob];\n\n    if (_charset) {\n      args.push(_charset[0].replace(/^charset\\=/, '').replace(/;$/, ''));\n    }\n\n    reader.readAsText.apply(reader, args);\n    return fileReaderReady(reader);\n  }\n\n  var support = {\n    blob: 'FileReader' in self && 'Blob' in self && function () {\n      try {\n        new Blob();\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function (body, options) {\n      this._bodyInit = body;\n\n      if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n        this._options = options;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (!body) {\n        this._bodyText = '';\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {// Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type');\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function () {\n        var rejected = consumed(this);\n\n        if (rejected) {\n          return rejected;\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob);\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob');\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]));\n        }\n      };\n\n      this.arrayBuffer = function () {\n        return this.blob().then(readBlobAsArrayBuffer);\n      };\n\n      this.text = function () {\n        var rejected = consumed(this);\n\n        if (rejected) {\n          return rejected;\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob, this._options);\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text');\n        } else {\n          return Promise.resolve(this._bodyText);\n        }\n      };\n    } else {\n      this.text = function () {\n        var rejected = consumed(this);\n        return rejected ? rejected : Promise.resolve(this._bodyText);\n      };\n    }\n\n    if (support.formData) {\n      this.formData = function () {\n        return this.text().then(decode);\n      };\n    }\n\n    this.json = function () {\n      return this.text().then(JSON.parse);\n    };\n\n    return this;\n  } // HTTP methods whose capitalization should be normalized\n\n\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method;\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read');\n      }\n\n      this.url = input.url;\n      this.credentials = input.credentials;\n\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n\n      this.method = input.method;\n      this.mode = input.mode;\n\n      if (!body) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = input;\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit';\n\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests');\n    }\n\n    this._initBody(body, options);\n  }\n\n  Request.prototype.clone = function () {\n    return new Request(this);\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body.trim().split('&').forEach(function (bytes) {\n      if (bytes) {\n        var split = bytes.split('=');\n        var name = split.shift().replace(/\\+/g, ' ');\n        var value = split.join('=').replace(/\\+/g, ' ');\n        form.append(decodeURIComponent(name), decodeURIComponent(value));\n      }\n    });\n    return form;\n  }\n\n  function headers(xhr) {\n    var head = new Headers();\n    var pairs = xhr.getAllResponseHeaders().trim().split('\\n');\n    pairs.forEach(function (header) {\n      var split = header.trim().split(':');\n      var key = split.shift().trim();\n      var value = split.join(':').trim();\n      head.append(key, value);\n    });\n    return head;\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this._initBody(bodyInit, options);\n\n    this.type = 'default';\n    this.status = options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = options.statusText;\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers);\n    this.url = options.url || '';\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function () {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    });\n  };\n\n  Response.error = function () {\n    var response = new Response(null, {\n      status: 0,\n      statusText: ''\n    });\n    response.type = 'error';\n    return response;\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function (url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code');\n    }\n\n    return new Response(null, {\n      status: status,\n      headers: {\n        location: url\n      }\n    });\n  };\n\n  self.Headers = Headers;\n  self.Request = Request;\n  self.Response = Response;\n\n  self.fetch = function (input, init) {\n    return new Promise(function (resolve, reject) {\n      var request;\n\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input;\n      } else {\n        request = new Request(input, init);\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL;\n        } // Avoid security warnings on getResponseHeader when not allowed by CORS\n\n\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL');\n        }\n\n        return;\n      }\n\n      var __onLoadHandled = false;\n\n      function onload() {\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        var status = xhr.status === 1223 ? 204 : xhr.status;\n\n        if (status < 100 || status > 599) {\n          if (__onLoadHandled) {\n            return;\n          } else {\n            __onLoadHandled = true;\n          }\n\n          reject(new TypeError('Network request failed'));\n          return;\n        }\n\n        var options = {\n          status: status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        };\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n\n        if (__onLoadHandled) {\n          return;\n        } else {\n          __onLoadHandled = true;\n        }\n\n        resolve(new Response(body, options));\n      }\n\n      xhr.onreadystatechange = onload;\n      xhr.onload = onload;\n\n      xhr.onerror = function () {\n        if (__onLoadHandled) {\n          return;\n        } else {\n          __onLoadHandled = true;\n        }\n\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.open(request.method, request.url, true); // `withCredentials` should be setted after calling `.open` in IE10\n      // http://stackoverflow.com/a/19667959/1219343\n\n      try {\n        if (request.credentials === 'include') {\n          if ('withCredentials' in xhr) {\n            xhr.withCredentials = true;\n          } else {\n            console && console.warn && console.warn('withCredentials is not supported, you can ignore this warning');\n          }\n        }\n      } catch (e) {\n        console && console.warn && console.warn('set withCredentials error:' + e);\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function (value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    });\n  };\n\n  self.fetch.polyfill = true; // Support CommonJS\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = self.fetch;\n  }\n})(typeof self !== 'undefined' ? self : this);","map":null,"metadata":{},"sourceType":"script"}