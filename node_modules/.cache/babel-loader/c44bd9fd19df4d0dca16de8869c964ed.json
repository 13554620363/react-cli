{"ast":null,"code":"import _objectSpread from \"/Users/hucong/Desktop/workspace/creat-app/my/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/hucong/Desktop/workspace/creat-app/my/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport fetchJsonp from 'fetch-jsonp';\nimport _ from 'lodash';\nimport 'babel-polyfill';\n\nvar fetch = require('fetch-ie8');\n\nvar Data = function Data(_ref) {\n  var url = _ref.url,\n      _ref$method = _ref.method,\n      method = _ref$method === void 0 ? 'get' : _ref$method,\n      _ref$headers = _ref.headers,\n      headers = _ref$headers === void 0 ? {} : _ref$headers,\n      options = _objectWithoutProperties(_ref, [\"url\", \"method\", \"headers\"]);\n\n  if (!url) {\n    throw new Error(\"Property 'url' should not be empty!\");\n  }\n\n  if (url.indexOf('/') != 0 && url.indexOf('http') != 0) {// url = `${URL_PREFIX}/${url}`;\n  }\n\n  if (method == 'jsonp') {\n    return fetchJsonp(url, options);\n  }\n\n  if (i18n && i18n.language) {\n    headers.locale = i18n.language;\n  }\n\n  var isFormData = options.isFormData;\n  var originHeaders = {\n    'Content-Type': 'application/json;charset=utf-8'\n  };\n  var headersNew = !isFormData ? originHeaders : isFormData;\n  return fetch(url, _objectSpread({\n    method: method,\n    headers: _objectSpread({}, headersNew, headers)\n  }, options)).then(function (response) {\n    return response.json();\n  }).then(function (res) {\n    return newResult || res;\n  }).catch(function (err) {\n    console.error(err);\n    return Promise.resolve();\n  });\n}; // get 请求\n\n\nData.get = function (_ref2) {\n  var method = _ref2.method,\n      body = _ref2.body,\n      options = _objectWithoutProperties(_ref2, [\"method\", \"body\"]);\n\n  // 把body的参数拼接到url中，并把body参数去掉\n  if (_.isPlainObject(body)) {\n    var url = options.url;\n\n    if (url.indexOf('?') == -1) {\n      url += '?';\n    }\n\n    for (var key in body) {\n      url += \"\".concat(key, \"=\").concat(body[key], \"&\");\n    }\n\n    options.url = url.substring(0, url.length - 1);\n  }\n\n  return Data(_objectSpread({\n    method: 'get'\n  }, options));\n}; // post 请求\n\n\nData.post = function (_ref3) {\n  var method = _ref3.method,\n      params = _ref3.params,\n      body = _ref3.body,\n      options = _objectWithoutProperties(_ref3, [\"method\", \"params\", \"body\"]);\n\n  if (_.isPlainObject(params)) {\n    params = JSON.stringify(params);\n  }\n\n  if (body || params) {\n    options.body = body || params;\n  }\n\n  return Data(_objectSpread({\n    method: 'post'\n  }, options));\n};\n\nmodule.exports = Data;","map":{"version":3,"sources":["/Users/hucong/Desktop/workspace/creat-app/my/src/client/data/index.js"],"names":["fetchJsonp","_","fetch","require","Data","url","method","headers","options","Error","indexOf","i18n","language","locale","isFormData","originHeaders","headersNew","then","response","json","res","newResult","catch","err","console","error","Promise","resolve","get","body","isPlainObject","key","substring","length","post","params","JSON","stringify","module","exports"],"mappings":"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","sourcesContent":["import fetchJsonp from 'fetch-jsonp';\nimport _ from 'lodash';\nimport 'babel-polyfill';\nconst fetch = require('fetch-ie8');\n\nconst Data = ({ url, method = 'get', headers = {}, ...options }) => {\n  if (!url) {\n    throw new Error(\"Property 'url' should not be empty!\");\n  }\n\n  if (url.indexOf('/') != 0 && url.indexOf('http') != 0) {\n    // url = `${URL_PREFIX}/${url}`;\n  }\n\n  if (method == 'jsonp') {\n    return fetchJsonp(url, options);\n  }\n\n  if (i18n && i18n.language) {\n    headers.locale = i18n.language;\n  }\n  const isFormData = options.isFormData;\n  const originHeaders = {\n      'Content-Type': 'application/json;charset=utf-8',\n  };\n  const headersNew = !isFormData ? originHeaders : isFormData;\n  return fetch(url, {\n    method,\n    headers: {\n        ...headersNew,\n        ...headers\n    },\n    ...options\n  })\n    .then(response => {\n      return response.json();\n    })\n    .then(res => {\n      return newResult || res;\n    })\n    .catch(err => {\n      console.error(err);\n      return Promise.resolve();\n    });\n};\n\n// get 请求\nData.get = ({ method, body, ...options }) => {\n  // 把body的参数拼接到url中，并把body参数去掉\n  if (_.isPlainObject(body)) {\n    let url = options.url;\n\n    if (url.indexOf('?') == -1) {\n      url += '?';\n    }\n\n    for (let key in body) {\n      url += `${key}=${body[key]}&`;\n    }\n\n    options.url = url.substring(0, url.length - 1);\n  }\n\n  return Data({\n    method: 'get',\n    ...options\n  });\n};\n\n// post 请求\nData.post = ({ method, params, body, ...options }) => {\n  if (_.isPlainObject(params)) {\n    params = JSON.stringify(params);\n  }\n\n  if (body || params) {\n    options.body = body || params;\n  }\n\n  return Data({\n    method: 'post',\n    ...options\n  });\n};\n\n\nmodule.exports = Data;\n"]},"metadata":{},"sourceType":"module"}